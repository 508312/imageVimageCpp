#include "SDLGuimage.h"
#include "TextureLoader.h"
#include "CompositeImage.h"
#include <cmath>
#include <vector>
#include <unordered_map>
#include "ImageBuilder.h"
#include "Timer.h"
#include "string"
#include <stack>
#include <queue>

SDLGuimage::SDLGuimage( int w, int h, int row, int col, int detail_thresh, int local_transition_thresh,
                        SDLTextureLoader* texloader, CompositeImage* starting_image,
                         SDL_Renderer* renderer, SDLGuimage* parent, StatsCounter* stats_cntr) {
    //ctor
    mWidth = w;
    mHeight = h;
    mRow = 0;
    mCol = 0;
    mZoom = 0;

    mDetailThreshold = detail_thresh;
    mBlendThreshold = 8000;

    mTextureLoader = texloader;

    mCompositeImage = starting_image;

    mLocalTransitionZoom = 200/calculateSmallX();

    this->mRenderer = renderer;
    this->mParent = parent;
    this->mStatsCounter = stats_cntr;
    if (stats_cntr != nullptr) {
        this->mStatsCounter->addSeenImage(starting_image);
    }

    mRow = row;
    mCol = col;

    changeCamPos(mWidth/2, mHeight/2);
}
SDLGuimage::SDLGuimage( int w, int h, int row, int col, int detail_thresh, int local_transition_thresh,
                        SDLTextureLoader* texloader, CompositeImage* starting_image,
                         SDL_Renderer* renderer, SDLGuimage* parent)
        : SDLGuimage(w, h, row, col, detail_thresh, local_transition_thresh, texloader, starting_image, renderer, parent, nullptr) {
}

SDLGuimage::SDLGuimage( int w, int h, int row, int col, int detail_thresh, int local_transition_thresh,
                        SDLTextureLoader* texloader, CompositeImage* starting_image,
                         SDL_Renderer* renderer)
        : SDLGuimage(w, h, row, col, detail_thresh, local_transition_thresh, texloader, starting_image, renderer, nullptr, nullptr) {

}
SDLGuimage::SDLGuimage( int w, int h, int detail_thresh, int local_transition_thresh,
                        SDLTextureLoader* texloader,
                        CompositeImage* starting_image, SDL_Renderer* renderer)
        : SDLGuimage(w, h, 0, 0, detail_thresh, local_transition_thresh, texloader, starting_image, renderer, nullptr, nullptr) {
}

SDLGuimage::SDLGuimage( int w, int h, int detail_thresh, int local_transition_thresh, SDLTextureLoader* texloader,
                        CompositeImage* starting_image, SDL_Renderer* renderer, StatsCounter* stats_cntr)
        : SDLGuimage(w, h, 0, 0, detail_thresh, local_transition_thresh, texloader, starting_image, renderer, nullptr, stats_cntr) {
}


SDLGuimage::~SDLGuimage() {
    //dtor
}

bool SDLGuimage::shouldBeDrawn() {
    if (mNextImageExists) {
        for (int i = 0; i < mNextImages.size(); i++) {
            if (mNextImages[i].shouldBeDrawn()) {
                return true;
            }
        }
        return false;
    }
    return !mIsOffScreen;
}

/** Threshold in width **/
void SDLGuimage::setLocalTransitionThreshold(int thresh_width) {
    mLocalTransitionZoom = thresh_width/calculateSmallX();
}

float SDLGuimage::calculateSmallX() {
    return mCompositeImage->getWidth() / (float)mCompositeImage->getNumWidth();
}

float SDLGuimage::calculateSmallY() {
    return mCompositeImage->getHeight() / (float)mCompositeImage->getNumHeight();
}

float SDLGuimage::calculateWarpScaleX() {
    return 1 + (mWidth/(calculateSmallX() * mLocalTransitionZoom) - 1) * mZoom/mLocalTransitionZoom;
}

float SDLGuimage::calculateWarpScaleY() {
    return 1 + (mHeight/(calculateSmallY() * mLocalTransitionZoom) - 1) * mZoom/mLocalTransitionZoom;
}

void SDLGuimage::createDetailedCoalesced() {
    float theoretical_x = calculateSmallX();
    float theoretical_y = calculateSmallY();

    int min_x_ind, min_y_ind, max_x_ind, max_y_ind;

    calculateBoundIndexes(min_x_ind, min_y_ind, max_x_ind, max_y_ind);

    int num_x = max_x_ind - min_x_ind;
    int num_y = max_y_ind - min_y_ind;

    CompositeImage* img;
    SDL_Texture* tex;
    SDL_Rect texrect = {0, 0, std::round(theoretical_x*mZoom), std::round(theoretical_y*mZoom)};
    SDL_Rect srcrect = {NULL, NULL, NULL, NULL};

    float x_start = 0;
    float x_end = 0;
    float y_start = 0;
    float y_end = 0;

    int tex_w;
    int tex_h;

    std::vector<std::vector<int>> used;
    used.resize(mCompositeImage->getNumHeight());

    //Timer t;
    //int sum = 0;
    for (int i = min_y_ind; i < max_y_ind; i++) {
        for (int j = min_x_ind; j < max_x_ind; j++) {
            int idx = mCompositeImage->getImageIdAt(i, j);

            if (idx == CID_EMPTY) {
                continue;
            }
            int si = i;
            int sj = j;
            int width = mCompositeImage->getCoalescedWidth(i, j);

            if (idx == CID_BORDER) {
                uint16_pair corner_pos = mCompositeImage->findCorner(i, j);
                si = corner_pos.i;
                sj = corner_pos.j;
                idx = mCompositeImage->getImageIdAt(si, sj);
            }

            if (idx == CID_CORNER) {
                uint16_pair start_pos = mCompositeImage->findStart(si, sj);
                if (std::find(used[start_pos.i].begin(), used[start_pos.i].end(), start_pos.j) != used[start_pos.i].end()) {
                    continue;
                }
                used[start_pos.i].push_back(start_pos.j);
                width = std::max(si - start_pos.i, sj - start_pos.j) + 1;
                si = start_pos.i;
                sj = start_pos.j;
            }

            texrect.x = std::max(0.0, std::round((sj*theoretical_x - mCamMinX) * mZoom));
            texrect.w = (std::min((sj+width)*theoretical_x, mCamMaxX) - std::max(mCamMinX, sj * theoretical_x)) * mZoom;
            texrect.w += ((int)(texrect.x + texrect.w) != (int) std::max(0.0, std::round(((sj+width)*theoretical_x - mCamMinX) * mZoom)));

            x_start = std::max((mCamMinX - sj*theoretical_x) * mZoom, 0.0);
            x_end = std::min((mCamMaxX - sj*theoretical_x)*mZoom, theoretical_x*width*mZoom);


            texrect.y = std::max(0.0, std::round((si*theoretical_y - mCamMinY) * mZoom));
            texrect.h = (std::min((si+width)*theoretical_y, mCamMaxY) - std::max(mCamMinY, si * theoretical_y)) * mZoom;
            texrect.h += ((int)(texrect.y + texrect.h) != (int) std::max(0.0, std::round(((si+width)*theoretical_y - mCamMinY) * mZoom)));

            y_start = std::max((mCamMinY - si*theoretical_y) * mZoom, 0.0);
            y_end = std::min((mCamMaxY - si*theoretical_y)*mZoom, theoretical_y*width*mZoom);

            img = mCompositeImage->getImageAt(si, sj);
            //t.start();
            tex = mTextureLoader->getTexture(img, theoretical_x*mZoom*width);
            //sum += t.get();

            SDL_QueryTexture(tex, NULL, NULL, &tex_w, &tex_h);

            float difference_x = tex_w/(theoretical_x*mZoom*width);
            float difference_y = tex_h/(theoretical_y*mZoom*width);

            srcrect.x = std::round(x_start * difference_x);
            srcrect.y = std::round(y_start * difference_y);
            srcrect.w = std::round((x_end - x_start) * difference_x);
            srcrect.h = std::round((y_end - y_start) * difference_y);

            SDL_RenderCopy(mRenderer, tex, &srcrect, &texrect);

            //TODO: remove hardcode lol
            if (mZoom > mLocalTransitionZoom/8) {
                mStatsCounter->addSeenImage(img);
            }
        }
    }
    //std::cout << "GETTING TEXTURES TOOK " << sum << std::endl;

    if (mZoom > mLocalTransitionZoom) {
        std::cout << "ATTEMPTING TO ADD " << std::endl;
        addNextImages();
    }
}

void SDLGuimage::createDetailed() {
    float theoretical_x = calculateSmallX();
    float theoretical_y = calculateSmallY();

    int min_x_ind, min_y_ind, max_x_ind, max_y_ind;

    calculateBoundIndexes(min_x_ind, min_y_ind, max_x_ind, max_y_ind);

    int num_x = max_x_ind - min_x_ind;
    int num_y = max_y_ind - min_y_ind;

    CompositeImage* img;
    SDL_Texture* tex;
    SDL_Rect texrect = {0, 0, std::round(theoretical_x*mZoom), std::round(theoretical_y*mZoom)};
    SDL_Rect srcrect = {NULL, NULL, NULL, NULL};

    float x_start = 0;
    float x_end = 0;
    float y_start = 0;
    float y_end = 0;

    int tex_w;
    int tex_h;

    //Timer t;
    //int sum = 0;
    for (int i = min_y_ind; i < max_y_ind; i++) {
        texrect.y = std::max(0.0, std::round((i*theoretical_y - mCamMinY) * mZoom));
        texrect.h = (std::min((i+1)*theoretical_y, mCamMaxY) - std::max(mCamMinY, i * theoretical_y)) * mZoom;
        texrect.h += ((int)(texrect.y + texrect.h) != (int) std::max(0.0, std::round(((i+1)*theoretical_y - mCamMinY) * mZoom)));

        y_start = std::max((mCamMinY - i*theoretical_y) * mZoom, 0.0);
        y_end = std::min((mCamMaxY - i*theoretical_y)*mZoom, theoretical_y*mZoom);

        for (int j = min_x_ind; j < max_x_ind; j++) {
            texrect.x = std::max(0.0, std::round((j*theoretical_x - mCamMinX) * mZoom));
            texrect.w = (std::min((j+1)*theoretical_x, mCamMaxX) - std::max(mCamMinX, j * theoretical_x)) * mZoom;
            texrect.w += ((int)(texrect.x + texrect.w) != (int) std::max(0.0, std::round(((j+1)*theoretical_x - mCamMinX) * mZoom)));

            x_start = std::max((mCamMinX - j*theoretical_x) * mZoom, 0.0);
            x_end = std::min((mCamMaxX - j*theoretical_x)*mZoom, theoretical_x*mZoom);

            img = mCompositeImage->getImageAt(i, j);
            //t.start();
            tex = mTextureLoader->getTexture(img, theoretical_x*mZoom);
            //sum += t.get();

            SDL_QueryTexture(tex, NULL, NULL, &tex_w, &tex_h);

            float difference_x = tex_w/(theoretical_x*mZoom);
            float difference_y = tex_h/(theoretical_y*mZoom);

            srcrect.x = std::round(x_start * difference_x);
            srcrect.y = std::round(y_start * difference_y);
            srcrect.w = std::round((x_end - x_start) * difference_x);
            srcrect.h = std::round((y_end - y_start) * difference_y);

            SDL_RenderCopy(mRenderer, tex, &srcrect, &texrect);

            //TODO: remove hardcode lol
            if (mZoom > mLocalTransitionZoom/8) {
                mStatsCounter->addSeenImage(img);
            }
        }
    }
    //std::cout << "GETTING TEXTURES TOOK " << sum << std::endl;

    if (mZoom > mLocalTransitionZoom) {
        addNextImages();
    }
}

void SDLGuimage::calculateBoundIndexes(int& min_x_ind, int& min_y_ind, int& max_x_ind, int& max_y_ind) {
    float theoretical_x = calculateSmallX();
    float theoretical_y = calculateSmallY();

    min_x_ind = std::max((int)(mCamMinX/theoretical_x),
                              0);
    min_y_ind = std::max((int)(mCamMinY/theoretical_y),
                              0);
    max_x_ind = std::min((int)std::ceil(mCamMaxX/theoretical_x),
                              mCompositeImage->getNumWidth());
    max_y_ind = std::min((int)std::ceil(mCamMaxY/theoretical_y),
                              mCompositeImage->getNumHeight());
}

void SDLGuimage::addNextImages() {
    int min_x_ind, min_y_ind, max_x_ind, max_y_ind;
    calculateBoundIndexes(min_x_ind, min_y_ind, max_x_ind, max_y_ind);

    addNextImages(min_x_ind, min_y_ind, max_x_ind, max_y_ind);
}

void SDLGuimage::addNextImages(int min_x_ind, int min_y_ind, int max_x_ind, int max_y_ind) {
    float theoretical_x = calculateSmallX();
    float theoretical_y = calculateSmallY();

    float new_zoom = (theoretical_x * mZoom)/mWidth;
    double new_x, new_y;
    CompositeImage* img;

    for (int i = min_y_ind; i < max_y_ind; i++) {
        for (int j = min_x_ind; j < max_x_ind; j++) {
            int idx = mCompositeImage->getImageIdAt(i, j);

            if (idx >= CID_RESERVED && idx != CID_CORNER) {
                continue;
            }
            int si = i;
            int sj = j;
            int width = mCompositeImage->getCoalescedWidth(i, j);

            if (idx == CID_CORNER) {
                uint16_pair start_pos = mCompositeImage->findStart(i, j);

                si = start_pos.i;
                sj = start_pos.j;
                width = std::max(i - start_pos.i, j - start_pos.j) + 1;
            }

            if (std::find_if(mNextImages.begin(), mNextImages.end(),
                    [&si, &sj](SDLGuimage& x) { return x.getRow() == si &&
                                                        x.getCol() == sj;}) != mNextImages.end()) {
                continue;
            }

            img = mCompositeImage->getImageAt(si, sj);
            mNextImages.push_back(SDLGuimage(mWidth, mHeight, si, sj, mDetailThreshold, mLocalTransitionZoom * calculateSmallX(),
                                              mTextureLoader, img, mRenderer, this, mStatsCounter));
            mNextImageExists = true;

            //std::cout << "ADDING " << si << " " << sj << " with " << new_x << " " << new_y << std::endl;


            new_x = (mCamX - sj*theoretical_x) * mWidth/calculateSmallX();
            new_y = (mCamY - si*theoretical_y) * mWidth/calculateSmallX();

            mNextImages[mNextImages.size() - 1].changezoom(new_zoom * width);
            mNextImages[mNextImages.size() - 1].changeCamPos(new_x, new_y);
        }
    }
}

void SDLGuimage::generateImage() {
    if(mNextImageExists) {
        Timer t;
        t.start();
        std::vector<int> indexes_to_erase;
        for (int i = 0; i < mNextImages.size(); i++) {
            if (mNextImages[i].shouldBeDrawn())
                mNextImages[i].generateImage();
            else
                indexes_to_erase.push_back(i);
        }

        for (int i = 0; i < indexes_to_erase.size(); i++) {
            std::cout << "erased" << std::endl;
            (mNextImages.begin() + indexes_to_erase[i] - i)->clearNextImages();
            mNextImages.erase(mNextImages.begin() + indexes_to_erase[i] - i);
        }
        return;
    }

    if (mShouldBeDetailed) {
        Timer t;
        t.start();
        createDetailedCoalesced();
        //std::cout << "coal " << t.get() << std::endl;
    }

    if (mZoom * mWidth < mBlendThreshold) {
        int img_w, img_h;
        float difference_x;
        float difference_y;
        SDL_Texture* image = mTextureLoader->getTexture(mCompositeImage, mCompositeImage->getWidth() * mZoom);
        SDL_QueryTexture(image, NULL, NULL, &img_w, &img_h);
        difference_x = (float) img_w / (float) mCompositeImage->getWidth();
        difference_y = (float) img_h / (float) mCompositeImage->getHeight();
        float real_w = std::min((float)mCompositeImage->getWidth(), mCamMaxX) - std::max(0.0f, mCamMinX);
        float real_h = std::min((float)mCompositeImage->getHeight(), mCamMaxY) - std::max(0.0f, mCamMinY);

        SDL_Rect rect{std::max(std::round(-mCamMinX * mZoom), 0.0),
                        std::max(std::round(-mCamMinY * mZoom), 0.0),
                        std::round(real_w * mZoom), std::round(real_h * mZoom)};
        SDL_Rect srcrect{std::round(mCamMinX * difference_x), std::round(mCamMinY * difference_y),
                        std::round((mCamMaxX - mCamMinX) * difference_x), std::round((mCamMaxY - mCamMinY)  * difference_y)};

        double t = (mZoom*mWidth - mDetailThreshold)/(mBlendThreshold - mDetailThreshold);
        //std::cout << "t is  " << t << " z*w " << mZoom*mWidth << std::endl;
        t = std::clamp(t, 0.0, 1.0);
        t = t*t*(3 - 2*t);
        int factor = 255 * (1-t) + 0 * t;

        SDL_SetTextureBlendMode(image, SDL_BLENDMODE_BLEND);
        SDL_SetTextureAlphaMod(image, factor);

        SDL_RenderCopy(mRenderer, image, &srcrect, &rect);

        SDL_SetTextureBlendMode(image, SDL_BLENDMODE_NONE);
        SDL_SetTextureAlphaMod(image, 255);
    }
}


bool SDLGuimage::switchToParent() {
    if (mParent != nullptr) {
        mParent->makeActive();
        return 1;
    }
    return 0;
}

void SDLGuimage::makeActive() {
    clearNextImages();
}

void SDLGuimage::clearNextImages() {
    if (mNextImageExists) {
        for (int i=0; i < mNextImages.size(); i++) {
            mNextImages[i].clearNextImages();
        }
    }
    mNextImages.clear();
    mNextImageExists = false;
}

//Theoretical cam, becomes smaller, over the image
void SDLGuimage::updateCamBounds(){
    float half_w = 0.5 * mWidth / mZoom;
    float half_h = 0.5 * mHeight / mZoom;

    mCamMaxX = mCamX + half_w;
    mCamMinX = mCamX - half_w;
    mCamMaxY = mCamY + half_h;
    mCamMinY = mCamY - half_h;
    if (mCamMaxX < 0 || mCamMinX > mWidth || mCamMaxY < 0 || mCamMinY > mHeight) {
        std::cout << " WENT OFF SCREEN " << mRow << " " << mCol << std::endl;
        mIsOffScreen = true;
    }
}

/** Moves camera based on position of cursor, as if on canvas. **/
void SDLGuimage::moveCamPosBasedOnMouse(double cur_x, double cur_y, float delta_z) {
    if (mNextImageExists){
        for (int i = 0; i < mNextImages.size(); i++)
            mNextImages[i].moveCamPosBasedOnMouse(cur_x, cur_y, delta_z);
        return;
    }

    float new_min_x = (mCamX - mWidth/(2*mZoom)) + cur_x/mZoom - cur_x/(mZoom*delta_z); // 0 + 800 - 400  400
    float new_min_y = (mCamY - mHeight/(2*mZoom)) + cur_y/mZoom - cur_y/(mZoom*delta_z);

    double new_x = (new_min_x + mWidth / (mZoom * delta_z * 2));
    double new_y = (new_min_y + mHeight / (mZoom * delta_z * 2));

    changeCamPos(new_x, new_y);

    // TODO: just b careful with this, put more thought.
    if (mParent != nullptr) {
        mParent->changeCamPos(mCol * calculateSmallX() + mCamX / mLocalTransitionZoom,
                mRow * calculateSmallY() + mCamY / mLocalTransitionZoom);
    }
}

/** Changes cam position and updates bounds **/
void SDLGuimage::changeCamPos(double x, double y) {
    mCamX = x;
    mCamY = y;
    //std::cout << mRow << " " << mCol << " has xy " << mCamX << " " << mCamY << std::endl;

    updateCamBounds();
}

void SDLGuimage::incrementzoom(float zd) {
    if (mNextImageExists){
        int len_next = mNextImages.size();
        for (int i = 0; i < len_next; i++) {
            if (!mNextImageExists) {
                return;
            }
            mNextImages[i].incrementzoom(zd);
        }
        return;
    }
    //if (mZoom * zd < (mLocalTransitionZoom*calculateSmallX())/mCompositeImage->getWidth()) {
    //    if (switchToParent()) {
    //        mParent->adjustBackTransition(mZoom * zd, mRow, mCol, mCamX, mCamY);
    //    }
    //    return;
    //}

    //std::cout << mRow << " " << mCol << "x " << mCamX << " y " << mCamY << std::endl;

    changezoom(mZoom * zd);

}

void SDLGuimage::adjustBackTransition(float z, int row, int col, float from_cam_x, float from_cam_y) {
    changezoom(mLocalTransitionZoom * z);
    changeCamPos(col * calculateSmallX() + from_cam_x / mLocalTransitionZoom,
                    row * calculateSmallY() + from_cam_y / mLocalTransitionZoom);
}

void SDLGuimage::changezoom(float z) {
    mZoom = std::max(z, (float)-1000);

    if (mZoom * mWidth > mDetailThreshold) {
        mShouldBeDetailed = true;
    } else {
        mShouldBeDetailed = false;
    }
    updateCamBounds();
}

int SDLGuimage::getMaxRow() {
    return mCompositeImage->getNumHeight();
}

int SDLGuimage::getMaxCol() {
    return mCompositeImage->getNumWidth();
}

SDLGuimage* SDLGuimage::getNext(int row, int col) {
    for (int i = 0; i < mNextImages.size(); i++) {
        if (mNextImages[i].mRow == row && mNextImages[i].mCol == col) {
            return &mNextImages[i];
        }
    }
    return nullptr;
}

void SDLGuimage::getBottomLevel(std::vector<SDLGuimage*>& res_arr) {
    if (mNextImages.size() == 0) {
        res_arr.push_back(this);
    } else {
        for (int i = 0; i < mNextImages.size(); i++) {
            mNextImages[i].getBottomLevel(res_arr);
        }
    }
}

float SDLGuimage::getCamX() {
    return mCamX;
}

float SDLGuimage::getCamY() {
    return mCamY;
}

float SDLGuimage::getWidth() {
    return mWidth;
}

float SDLGuimage::getHeight() {
    return mHeight;
}

int SDLGuimage::getRow() {
    return mRow;
}

int SDLGuimage::getCol() {
    return mCol;
}

int proper_mod(int x, int m) {
    return (x%m + m)%m;
}

void SDLGuimage::addMissing(int diff_row, int diff_col) {
    SDLGuimage* cur = mParent;
    SDLGuimage* prev = nullptr;
    std::stack<SDLGuimage*> path;
    path.push(this);

    if (cur == nullptr) {
        return;
    }

    //check in parent first
    for (int i = 0; i < cur->mNextImages.size(); i++) {
        if((cur->mNextImages[i].mRow == mRow + diff_row) &&
           (cur->mNextImages[i].mCol == mCol + diff_col)) {
            return;
        }
    }

    while (cur->mParent != nullptr &&
           ((cur->mRow + diff_row) < 0 || (cur->mRow + diff_row) >= cur->getMaxCol() ||
           (cur->mRow + diff_col) < 0 || (cur->mCol + diff_col) >= cur->getMaxCol())) {
        path.push(cur);
        prev = cur;
        cur = cur->mParent;
    }

    int n_x;
    int n_y;
    SDLGuimage* cur_orig = cur;
    SDLGuimage* next;

    if (cur->mParent == nullptr &&
        (cur->mCol + diff_col < 0 || cur->mCol + diff_col >= cur->getMaxCol() ||
        cur->mRow + diff_row < 0 || cur->mRow + diff_row >= cur->getMaxRow())) {
            return;
        }

    while (!path.empty()) {
        cur_orig = path.top();
        path.pop();
        n_x = proper_mod(cur_orig->mCol + diff_col, cur_orig->getMaxCol());
        n_y = proper_mod(cur_orig->mRow + diff_row, cur_orig->getMaxRow());

        next = cur->getNext(n_y, n_x);

        std::cout << "path" << path.size() << " N_x " << n_x << " n_y " << n_y << " mZoom " << cur_orig->mZoom << std::endl;

        if (next == nullptr) {
            cur->addNextImages(n_x, n_y, n_x + 1, n_y + 1);
            next = cur->getNext(n_y, n_x);
            next->changezoom(cur_orig->mZoom);
            next->changeCamPos(cur_orig->mCamX - cur_orig->mWidth * diff_col,
                                cur_orig->mCamY - cur_orig->mHeight * diff_row);
        }

        cur = next;
        if (cur == nullptr) {
            std::cout << "YOU FUCKED UP MORON" << std::endl;
        }
    }
}
